# -*- coding: utf-8 -*-
"""Sales Prediction using Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XM-c3Jyr4_xPwXb_R3Rj_HKg1hcLZ-jP

*Sales Prediction using Python*
"""

# Step 1: Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

# Step 2: Load and inspect data
df = pd.read_csv('sales.csv', index_col=0)
print("First 5 rows:")
print(df.head())
print("\nData Summary:")
print(df.describe())

# Step 3: Check for missing values
print("\nMissing values:")
print(df.isnull().sum())

# Step 4: Correlation Analysis
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Step 5: Data Visualization
# Scatter plots of features vs sales
plt.figure(figsize=(15, 4))
for i, col in enumerate(['TV', 'Radio', 'Newspaper'], 1):
    plt.subplot(1, 3, i)
    sns.scatterplot(data=df, x=col, y='Sales')
    plt.title(f'{col} vs Sales')
plt.tight_layout()
plt.show()

# Distribution plots
plt.figure(figsize=(15, 4))
for i, col in enumerate(['TV', 'Radio', 'Newspaper', 'Sales'], 1):
    plt.subplot(1, 4, i)
    sns.histplot(df[col], kde=True)
    plt.title(f'{col} Distribution')
plt.tight_layout()
plt.show()

# Step 6: Prepare data for modeling
X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 7: Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 8: Make predictions
y_pred = model.predict(X_test)

# Step 9: Model evaluation
print("\nModel Coefficients:")
print(pd.DataFrame(model.coef_, index=X.columns, columns=['Coefficient']))

print("\nRegression Metrics:")
print('RÂ² Score:', metrics.r2_score(y_test, y_pred))
print('MAE:', metrics.mean_absolute_error(y_test, y_pred))
print('MSE:', metrics.mean_squared_error(y_test, y_pred))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

# Step 10: Visualization of predictions
plt.figure(figsize=(10,6))
plt.scatter(y_test, y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual vs Predicted Sales')
plt.show()

# Residual analysis
residuals = y_test - y_pred
plt.figure(figsize=(10,6))
sns.histplot(residuals, kde=True)
plt.title('Residual Distribution')
plt.show()

# Feature importance visualization
coefficients = pd.DataFrame(model.coef_, index=X.columns, columns=['Coefficient'])
coefficients.sort_values('Coefficient').plot(kind='barh', figsize=(10,6))
plt.title('Feature Importance (Coefficients)')
plt.xlabel('Coefficient Value')
plt.show()

# New Step 11: User input for predictions
def get_user_input():
    """Get advertising budgets from user input"""
    print("\n=== Sales Prediction Interface ===")
    tv = float(input("Enter TV advertising budget ($): "))
    radio = float(input("Enter Radio advertising budget ($): "))
    newspaper = float(input("Enter Newspaper advertising budget ($): "))
    return [[tv, radio, newspaper]]

while True:
    try:
        # Get user input
        new_data = get_user_input()

        # Make prediction
        prediction = model.predict(new_data)
        print(f"\nPredicted Sales: ${prediction[0]:.2f}")

        # Ask to continue
        cont = input("\nMake another prediction? (y/n): ").lower()
        if cont != 'y':
            print("Exiting prediction interface...")
            break

    except ValueError:
        print("Invalid input! Please enter numeric values.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")